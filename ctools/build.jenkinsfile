// This job logs the Jenkins svc account in to the server where the jenkins_pipeline.py is deployed
// and runs the pipeline directly.
// This job is activated for all pushes to branches and pull requests for ctools.
// It performs the following checks:
// - Syntax Checks
// - Merge Conflicts
// - Unit Tests

def environments = [
    "Ite" : [account_number: '245748476030']
]

pipeline {
    agent { label('agent1') }

    environment{
        DAS_EMR_SSH_CREDS_ITE = credentials("svc-ite-das-emr")
        //DAS_EMR_SSH_CREDS_STG= credentials("das_emr_ssh_creds_stg")
        //DAS_EMR_SSH_CREDS_PROD= credentials("das_emr_ssh_creds_prod")
        JENKINS_SA_GITHUB = credentials("jenkins-sa-github")
    }

    stages {
        stage('Cleanup') {
            steps {
                step([$class: 'WsCleanup'])
                checkout scm
            }
        }
        stage('Init Vars') {
            steps {
                script {
                    PIP_FILE = "${env.WORKSPACE}/pip_config"
                    AWS_CONFIG_FILE = "${env.WORKSPACE}/aws_config"
                    NEXUS_CREDS_ID="das-nexus-publish"
                    if (env.BRANCH_NAME == "main"){
                        //Using test repo for now, will update to main DAS prod repo when
                        //ready to publish to the world
                        NEXUS_REPO="https://repo.rm.census.gov/repository/DAS_Python/"
                        PUSH_VERSION_TAG=true
                    }else{
                        
                        NEXUS_REPO="https://repo.rm.census.gov/repository/DAS-Pypi-Test/"
                        PUSH_VERSION_TAG=false
                    }
                    env.PUSH_VERSION_TAG="${PUSH_VERSION_TAG}"
                }
            }
        }
        stage('Get IPADDR') {
            steps {
                configFileProvider([configFile(fileId: '396fc950-3750-4206-a31f-93b0ad853f6f', variable: 'config_file', targetLocation: 'EMR_Cluster_Config.json')]) {
                    // Do Nothing here
                }
                sh """
                JENKINS_IP = cat ${env.WORKSPACE}/EMR_Cluster_Config.json | jq -r .ITE.JENKINS_IPADDR
                """
            }
        }
        stage('SSH Test') {
            environment {
                BASE_BRANCH = "${env.BRANCH_NAME.startsWith('PR-') ? env.CHANGE_TARGET : "main"}"
            }
            steps {
                script {
                    if(!env.GIT_PREVIOUS_COMMIT){
                        env.GIT_PREVIOUS_COMMIT = env.GIT_COMMIT
                    }
                }
                sh '''
                    echo "Seeing what environment variables are present: "
                    echo "GIT_COMMIT: $GIT_COMMIT"
                    sshpass -p $DAS_EMR_SSH_CREDS_ITE_PSW ssh -o StrictHostKeyChecking=no $DAS_EMR_SSH_CREDS_ITE_USR@\$(cat $WORKSPACE/EMR_Cluster_Config.json | jq -r .ITE.JENKINS_IPADDR) \
                        HADOOP_USER_NAME=hadoop PYSPARK_PYTHON=/usr/bin/python3 \
                        PYSPARK_DRIVER_PYTHON=/usr/bin/python3 \
                        DAS_S3ROOT=s3://v-s3-das-ite-tda-devtest-252999262699-us-gov-west-1 \
                        JBID=jenkins \
                        /usr/bin/python3 /mnt/gits/das-jenkins/jenkins_pipeline.py \
                          --repository_name ctools \
                          --commit_sha $GIT_COMMIT \
                          --previous_commit_sha $GIT_PREVIOUS_COMMIT \
                          --deploy_path /mnt/gits/jenkins/runs/ \
                          --syntax_checks \
                          --merge_conflicts \
                          --pylint_check \
                          --unit_tests \
                          --check_behind_base_branch ${BASE_BRANCH} \
                          --timeout 9000
                        sshpass -p "$DAS_EMR_SSH_CREDS_ITE_PSW" scp -o StrictHostKeyChecking=no $DAS_EMR_SSH_CREDS_ITE_USR@\$(cat $WORKSPACE/EMR_Cluster_Config.json | jq -r .ITE.JENKINS_IPADDR):/mnt/gits/jenkins/runs/$GIT_COMMIT/coverage.xml \
                        coverage.xml
                '''
            }
        }
        stage('Directory Cleanup') {
            steps {
                sh '''
                    sshpass -p "$DAS_EMR_SSH_CREDS_ITE_PSW" ssh -o StrictHostKeyChecking=no $DAS_EMR_SSH_CREDS_ITE_USR@\$(cat $WORKSPACE/EMR_Cluster_Config.json | jq -r .ITE.JENKINS_IPADDR) \
                        HADOOP_USER_NAME=hadoop \
                        /usr/bin/python3 /mnt/gits/das-jenkins/cleanup.py \
                          --dir /mnt/gits/jenkins/runs/$GIT_COMMIT
                '''
            }
        }
        stage('Package') {

            environment{
                NEXUS_REPO="${NEXUS_REPO}"
            }
            steps {
                withCredentials([
                    usernamePassword(credentialsId: "${NEXUS_CREDS_ID}", passwordVariable: 'TWINE_PASSWORD', usernameVariable: 'TWINE_USERNAME'),
                    file(credentialsId: 'census-ca-crt-file', variable: 'TWINE_CERT')
                ]){
                    sh '''
                        virtualenv .venv
                        . .venv/bin/activate
                        make upload
                        deactivate
                    '''

                }
            }
        
        }
        stage('Tag Release') {
            when {
                expression {env.PUSH_VERSION_TAG == 'true'}
            }
            environment{
                PACKAGE_BUILD_ID="${PACKAGE_BUILD_ID}"
            }

            steps {
                withCredentials([
                    gitUsernamePassword(credentialsId: "jenkins-sa-github", gitToolName: 'git-tool')
                ]){
                    sh '''
                        VERSION=$(ls target/dist/*.whl | sed -n 's/^.*das_ctools\\-\\(.*\\)\\-py3.*/\\1/p')
                        echo $VERSION
                        echo $BUILD_TAG
                        git tag -a $VERSION -m "CTools Package $VERSION from $BUILD_TAG"
                        git push origin --tags
                    '''

                }
            }
        }
        stage('Tag Release Dry-Run') {
            when {
                expression {env.PUSH_VERSION_TAG != 'true'}
            }
            environment{
                PACKAGE_BUILD_ID="${PACKAGE_BUILD_ID}"
            }

            steps {
                withCredentials([
                    gitUsernamePassword(credentialsId: "jenkins-sa-github", gitToolName: 'git-tool')
                ]){
                    sh '''
                        VERSION=$(ls target/dist/*.whl | sed -n 's/^.*das_ctools\\-\\(.*\\)\\-py3.*/\\1/p')
                        echo $VERSION
                        echo $BUILD_TAG
                        echo "CTools Package $VERSION from $BUILD_TAG"

                    '''

                }
            }
        }
    }
    post {
        always {
            cobertura coberturaReportFile: 'coverage.xml'
        }
    }

}
